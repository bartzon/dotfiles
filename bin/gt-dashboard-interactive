#!/usr/bin/env ruby

# --- Graphite Dashboard: Curses UI for PRs ---
# Refactored for clarity, modularity, and idiomatic Ruby

require 'json'
require 'open3'
require 'thread'
require 'csv'
require 'curses'

module GraphiteDashboard
  # Constants
  DEPENDENCIES = %w[gh jq gt].freeze
  LEGEND = "[c] Checkout  [o] Open PR  [b] Copy branch  [u] Copy URL  [v] View details  [d] Description  [k] Buildkite  [i] Build ID  [r] Refresh  [q] Quit"
  MAIN_BRANCH_NAME = 'main'.freeze
  MAIN_BRANCH_DESC = 'The main trunk branch - base for all feature branches'.freeze
  INSTALL_CMDS = {
    'gh' => 'brew install gh',
    'jq' => 'brew install jq',
    'gt' => 'npm install -g @withgraphite/graphite-cli'
  }.freeze

  # --- PR Value Object ---
  class PR
    attr_reader :number, :title, :branch, :status, :checks, :reviews, :merge, :url, :description, :buildkite_url, :main
    attr_accessor :stack_char, :restack

    def initialize(number:, title:, branch:, status:, checks:, reviews:, merge:, url:, description:, buildkite_url:, stack_char:, restack:, main: false)
      @number = number
      @title = title
      @branch = branch
      @status = status
      @checks = checks
      @reviews = reviews
      @merge = merge
      @url = url
      @description = description
      @buildkite_url = buildkite_url
      @stack_char = stack_char
      @restack = restack
      @main = main
    end

    def main?
      @main
    end

    def pr_number_display
      number.empty? ? '*' : "* ##{number}"
    end

    def to_table_row
      [
        pr_number_display,
        title.gsub("\n", " ").strip,
        branch,
        status,
        checks,
        reviews,
        merge,
        restack
      ]
    end
  end

  # --- Dependency Checker ---
  class DependencyChecker
    def self.check_and_install
      missing = DEPENDENCIES.reject { |cmd| system("which #{cmd} > /dev/null 2>&1") }
      missing.each do |cmd|
        puts "#{cmd} is not installed. Installing with brew..."
        if system("which brew > /dev/null 2>&1")
          unless system(INSTALL_CMDS[cmd])
            puts "Failed to install #{cmd} with brew. Please install it manually."
            exit 1
          end
        else
          puts "Homebrew is not installed. Please install #{cmd} manually."
          exit 1
        end
      end

      unless system("git rev-parse --git-dir > /dev/null 2>&1")
        puts "Error: Not in a git repository"
        exit 1
      end
    end
  end

  # --- PR Fetcher ---
  class PRFetcher
    class << self
      def fetch
        prs = []
        gh_output, status = Open3.capture2('gh pr list --author @me --json number,title,headRefName,state,statusCheckRollup,reviewDecision,mergeable,url,body --limit 20 2>/dev/null')
        return prs unless status.success? && !gh_output.strip.empty? && gh_output.strip != "[]"
        pr_data = JSON.parse(gh_output)
        pr_data.each { |pr| prs << build_pr(pr) }
        prs
      rescue JSON::ParserError
        []
      end

      private

      def build_pr(pr)
        checks_status, buildkite_url = parse_checks(pr['statusCheckRollup'])
        review_status = parse_review(pr['reviewDecision'])
        merge_status = parse_merge(pr['mergeable'])
        PR.new(
          number: pr['number'].to_s,
          title: pr['title'] || "",
          branch: pr['headRefName'] || "",
          status: pr['state'] || "",
          checks: checks_status,
          reviews: review_status,
          merge: merge_status,
          url: pr['url'] || "",
          description: (pr['body'] || "").strip[0..800],
          buildkite_url: buildkite_url,
          stack_char: "◯",
          restack: "",
          main: false
        )
      end

      def parse_checks(status_rollup)
        return ["Unknown", ""] unless status_rollup && status_rollup.any?
        all_success = true
        has_failure = false
        has_pending = false
        buildkite_url = ""
        status_rollup.each do |context|
          next if context['name'] =~ /(review|required|mergeable)/i
          target_url = context['detailsUrl'] || context['targetUrl'] || ""
          buildkite_url = target_url if target_url.include?('buildkite.com') && buildkite_url.empty?
          conclusion = context['conclusion'] || context['state'] || ""
          case conclusion
          when 'SUCCESS'
            next
          when 'FAILURE', 'CANCELLED', 'ERROR'
            has_failure = true
            all_success = false
          when 'PENDING', 'IN_PROGRESS', ''
            has_pending = true
            all_success = false
          else
            all_success = false
          end
        end
        checks_status = if has_failure
                          "Failed"
                        elsif has_pending
                          "Running"
                        elsif all_success
                          "Passed"
                        else
                          "Unknown"
                        end
        [checks_status, buildkite_url]
      end

      def parse_review(decision)
        case decision
        when 'APPROVED' then 'Approved'
        when 'CHANGES_REQUESTED' then 'Changes'
        when 'REVIEW_REQUIRED' then 'Required'
        else 'None'
        end
      end

      def parse_merge(mergeable)
        case mergeable
        when 'MERGEABLE' then 'Ready'
        when 'CONFLICTING' then 'Conflicts'
        else 'Unknown'
        end
      end
    end
  end

  # --- Stack Info Builder ---
  class StackInfoBuilder
    class << self
      def build(prs)
        gt_output, _ = Open3.capture2('timeout 3s gt log --no-interactive 2>/dev/null || echo ""')
        pr_deps, parent_branches = fetch_pr_dependencies(prs, gt_output)
        sorted_indices = sort_prs(prs, pr_deps, parent_branches)
        update_prs(prs, pr_deps, parent_branches, sorted_indices)
      end

      private

      def fetch_pr_dependencies(prs, gt_output)
        pr_deps = []
        parent_branches = []
        threads = []
        pr_mutex = Mutex.new
        prs.each do |pr|
          next if pr.branch == MAIN_BRANCH_NAME || pr.number.empty?
          threads << Thread.new(pr) do |pr_thread|
            needs_restack = gt_output.include?("#{pr_thread.branch}.*needs restack") ? "Yes" : ""
            pr_data, status = Open3.capture2("gh pr view #{pr_thread.number} --json baseRefName 2>/dev/null")
            if status.success? && !pr_data.empty?
              begin
                data = JSON.parse(pr_data)
                base_branch = data.dig('baseRefName')
                if base_branch
                  depth = base_branch == MAIN_BRANCH_NAME ? 1 : 2
                  pr_mutex.synchronize do
                    parent_branches << base_branch if base_branch != MAIN_BRANCH_NAME
                    pr_deps << "#{pr_thread.number}:#{depth}:#{needs_restack}:#{base_branch}"
                  end
                end
              rescue JSON::ParserError
              end
            end
          end
        end
        threads.each(&:join)
        [pr_deps, parent_branches]
      end

      def sort_prs(prs, pr_deps, parent_branches)
        pr_indices = (0...prs.length).to_a
        sortable_prs = pr_indices.map do |i|
          pr = prs[i]
          depth, restack = 999, ""
          pr_deps.each do |dep|
            dep_parts = dep.split(':')
            if dep_parts[0] == pr.number
              depth = dep_parts[1].to_i
              restack = dep_parts[2]
              break
            end
          end
          [depth, pr.number.to_i, i, restack]
        end
        sortable_prs.sort.map { |entry| entry[2] }
      end

      def update_prs(prs, pr_deps, parent_branches, sorted_indices)
        new_prs = []
        sorted_indices.each do |i|
          pr = prs[i].dup
          pr_num = pr.number
          branch = pr.branch
          depth, restack = 1, ""
          pr_deps.each do |dep|
            dep_parts = dep.split(':')
            if dep_parts[0] == pr_num
              depth = dep_parts[1].to_i
              restack = dep_parts[2]
              break
            end
          end
          has_children = parent_branches.include?(branch)
          stack_char = case depth
                      when 1 then has_children ? "│┐" : "├"
                      when 2 then "│├"
                      when 3 then "││├"
                      else "│││├"
                      end
          pr.stack_char = stack_char
          pr.restack = restack
          new_prs << pr
        end
        prs.replace(new_prs)
      end
    end
  end

  # --- Action Superclass and Subclasses ---
  class Action
    def initialize(dashboard)
      @dashboard = dashboard
    end

    def perform(*args)
      raise NotImplementedError, 'Subclasses must implement perform.'
    end

    protected

    def prompt_continue
      puts "Press Enter to continue..."
      gets
    end
  end

  class CheckoutBranchAction < Action
    def perform(branch)
      system("clear")
      puts "Checking out #{branch}..."
      if system("git checkout #{branch} 2>/dev/null")
        puts "Successfully checked out #{branch}"
        sleep 1
      else
        puts "Failed to checkout #{branch}"
        prompt_continue
      end
    end
  end

  class OpenInBrowserAction < Action
    def perform(url)
      return if url.empty?

      if system("which open > /dev/null 2>&1")
        system("open '#{url}' 2>/dev/null &")
      elsif system("which xdg-open > /dev/null 2>&1")
        system("xdg-open '#{url}' 2>/dev/null &")
      else
        puts "Cannot open browser (no open/xdg-open command)"
        puts "URL: #{url}"
        prompt_continue
        return
      end

      puts "Opened in browser"
      sleep 1
    end
  end

  class CopyToClipboardAction < Action
    def perform(text, description)
      return if text.empty?

      if system("which pbcopy > /dev/null 2>&1")
        system("echo -n '#{text}' | pbcopy")
      elsif system("which xclip > /dev/null 2>&1")
        system("echo -n '#{text}' | xclip -selection clipboard")
      else
        puts "Clipboard not available (no pbcopy/xclip)"
        puts "#{description.capitalize}: #{text}"
        prompt_continue
        return
      end

      puts "Copied #{description} to clipboard"
      sleep 1
    end
  end

  class ViewPRDetailsAction < Action
    def perform(pr_number)
      return if pr_number.empty?

      system("clear")
      puts "Loading PR ##{pr_number} details..."
      puts
      system("gh pr view #{pr_number}")
      prompt_continue
    end
  end

  class ShowDescriptionAction < Action
    def perform(description)
      return if description.empty?

      system("clear")
      puts "Description:"
      puts
      puts description
      prompt_continue
    end
  end

  class CopyBuildIDAction < Action
    def perform(buildkite_url)
      return if buildkite_url.empty?

      match = buildkite_url.match(/\/builds\/(\d+)/)
      build_id = match ? match[1] : nil
      if build_id
        CopyToClipboardAction.new(@dashboard).perform(build_id, "build ID")
      end
    end
  end

  # --- Dashboard Main Logic ---
  class Dashboard
    attr_reader :prs, :main_branch, :action_handler

    def initialize
      DependencyChecker.check_and_install
      @prs = PRFetcher.fetch
      StackInfoBuilder.build(@prs)
      @main_branch = PR.new(
        number: "",
        title: MAIN_BRANCH_NAME,
        branch: MAIN_BRANCH_NAME,
        status: "Trunk",
        checks: "",
        reviews: "",
        merge: "",
        url: "",
        description: MAIN_BRANCH_DESC,
        buildkite_url: "",
        stack_char: "◯",
        restack: "",
        main: true
      )
      @action_handler = Action.new(self)
    end

    def refresh_data
      @prs = PRFetcher.fetch
      StackInfoBuilder.build(@prs)
    end

    def action_for_hotkey(hotkey)
      case hotkey
      when 'c' then CheckoutBranchAction.new(self)
      when 'o' then OpenInBrowserAction.new(self)
      when 'b' then CopyToClipboardAction.new(self)
      when 'u' then CopyToClipboardAction.new(self)
      when 'v' then ViewPRDetailsAction.new(self)
      when 'd' then ShowDescriptionAction.new(self)
      when 'k' then OpenInBrowserAction.new(self)
      when 'i' then CopyBuildIDAction.new(self)
      else nil
      end
    end
  end

  # --- Curses Drawing Implementation ---
  class Drawing
    def self.styled_text(window, text, color_pair: 0, bold: false, y: nil, x: nil)
      window.attron(Curses.color_pair(color_pair) | (bold ? Curses::A_BOLD : 0)) do
        window.setpos(y, x) if y && x
        window.addstr(text)
      end
    end

    def self.styled_block(window, text, color_pair: 0, bold: false, align: :center, y: nil)
      width = window.maxx
      text = text.to_s
      x = case align
          when :center then [(width - text.length) / 2, 0].max
          when :right then [width - text.length - 1, 0].max
          else 0
          end
      y ||= window.cury
      styled_text(window, text, color_pair: color_pair, bold: bold, y: y, x: x)
    end

    def self.status_color(status)
      case status.to_s.downcase
      when 'trunk', 'ready', 'passed', 'approved'
        5 # green
      when 'running', 'required'
        6 # yellow
      when 'failed', 'conflicts', 'changes', 'error'
        4 # red
      when 'none', 'unknown'
        7 # gray
      else
        0 # default
      end
    end

    def self.table_with_hotkeys(prs, main_branch, legend, &on_action)
      Curses.init_screen
      Curses.curs_set(0)
      Curses.start_color
      Curses.use_default_colors
      Curses.init_pair(1, Curses::COLOR_BLACK, Curses::COLOR_CYAN) # highlight (black on cyan)
      Curses.init_pair(2, Curses::COLOR_YELLOW, -1) # legend
      Curses.init_pair(3, Curses::COLOR_GREEN, -1) # success
      Curses.init_pair(4, Curses::COLOR_RED, -1)   # error
      Curses.init_pair(5, Curses::COLOR_GREEN, -1) # status good
      Curses.init_pair(6, Curses::COLOR_YELLOW, -1) # status running
      Curses.init_pair(7, Curses::COLOR_WHITE, -1) # PR#, Title, Branch (white on transparent)
      win = Curses.stdscr
      win.keypad(true)
      Curses.raw
      selected = 0
      offset = 0
      header = ["PR#", "Title", "Branch", "Status", "Checks", "Reviews", "Merge", "Restack"]
      all_prs = [main_branch] + prs
      rows = [header] + all_prs.map(&:to_table_row)
      col_widths = rows.transpose.map { |col| col.map { |v| v.to_s.length }.max }
      per_page = win.maxy - 5

      loop do
        win.clear
        styled_block(win, 'Graphite CLI Dashboard', color_pair: 2, bold: true, align: :center, y: 0)
        win.setpos(2, 0)
        header_line = header.each_with_index.map { |h, i| h.ljust(col_widths[i]) }.join('  ')
        win.attron(Curses::A_BOLD) { win.addstr(header_line) }
        start = offset
        finish = [offset + per_page, all_prs.size].min

        (start...finish).each_with_index do |idx, i|
          pr = all_prs[idx]
          y = 3 + i
          win.setpos(y, 0)
          row = pr.to_table_row

          if idx == selected
            win.attron(Curses.color_pair(1)) do
              row_str = row.each_with_index.map { |cell, j| cell.ljust(col_widths[j]) }.join('  ')
              win.addstr(row_str)
            end
          else
            row.each_with_index do |cell, j|
              x = col_widths[0..j-1].sum + (j * 2)
              win.setpos(y, x)
              color = 0
              attr = Curses.color_pair(color)
              if [0,1,2].include?(j)
                color = 7 # PR#, Title, Branch: white on transparent
                attr = Curses.color_pair(color)
              elsif [3,4,5,6].include?(j) && y > 2 # Status, Checks, Reviews, Merge
                color = status_color(cell)
                attr = Curses.color_pair(color)
              end
              win.attron(attr) { win.addstr(cell.ljust(col_widths[j])) }
            end
          end
        end

        win.setpos(win.maxy - 2, 0)
        win.attron(Curses.color_pair(2)) { win.addstr(legend) }
        win.refresh
        ch = win.getch

        case ch
        when Curses::Key::UP, 65, 'k', 'K'.ord
          selected = [selected - 1, 0].max
          offset = [selected - per_page + 1, 0].max if selected < offset
        when Curses::Key::DOWN, 66, 'j', 'J'.ord
          selected = [selected + 1, all_prs.size - 1].min
          offset = [selected, all_prs.size - per_page].min if selected >= offset + per_page
          offset = 0 if offset < 0
        when 'q', 'Q'.ord
          break
        when 'c', 'C'.ord, 'o', 'O'.ord, 'b', 'B'.ord, 'u', 'U'.ord, 'v', 'V'.ord, 'd', 'D'.ord, 'k', 'K'.ord, 'i', 'I'.ord, 'r', 'R'.ord
          key = ch.is_a?(Integer) ? ch.chr.downcase : ch.downcase
          pr = all_prs[selected]
          Curses.close_screen
          on_action.call(key, pr)
          # Re-initialize Curses after the action
          Curses.init_screen
          Curses.curs_set(0)
          Curses.start_color
          Curses.use_default_colors
          Curses.init_pair(1, Curses::COLOR_BLACK, Curses::COLOR_CYAN)
          Curses.init_pair(2, Curses::COLOR_YELLOW, -1)
          Curses.init_pair(3, Curses::COLOR_GREEN, -1)
          Curses.init_pair(4, Curses::COLOR_RED, -1)
          Curses.init_pair(5, Curses::COLOR_GREEN, -1)
          Curses.init_pair(6, Curses::COLOR_YELLOW, -1)
          Curses.init_pair(7, Curses::COLOR_WHITE, -1)
          win = Curses.stdscr
          win.keypad(true)
          Curses.raw
        end
      end
    ensure
      Curses.close_screen
    end
  end
end

# --- Main Loop ---
if __FILE__ == $0
  include GraphiteDashboard
  dashboard = Dashboard.new
  Drawing.table_with_hotkeys(dashboard.prs, dashboard.main_branch, LEGEND) do |hotkey, pr|
    case hotkey
    when 'c'
      dashboard.action_for_hotkey('c').perform(pr.branch)
    when 'o'
      dashboard.action_for_hotkey('o').perform(pr.url)
    when 'b'
      dashboard.action_for_hotkey('b').perform(pr.branch, "branch name")
    when 'u'
      dashboard.action_for_hotkey('u').perform(pr.url, "PR URL")
    when 'v'
      dashboard.action_for_hotkey('v').perform(pr.number)
    when 'd'
      dashboard.action_for_hotkey('d').perform(pr.description)
    when 'k'
      dashboard.action_for_hotkey('k').perform(pr.buildkite_url)
    when 'i'
      dashboard.action_for_hotkey('i').perform(pr.buildkite_url)
    when 'r'
      dashboard.refresh_data
    end
  end
end
